import React, { useState, useEffect } from 'react';
import { Heart, Search, MapPin, Filter, ShoppingCart, User, Menu, X, Check, ChevronRight, ChevronLeft, PlusCircle, LogOut, Edit, Trash2 } from 'lucide-react';

// Mock data inicial
const initialPets = [
  { id: 1, name: 'Rex', type: 'dog', breed: 'Labrador', age: '2 anos', location: 'ONG Patas Felizes - SP', image: 'https://images.unsplash.com/photo-1601758228041-f3b2795255f1?w=400&h=400&fit=crop', description: 'Muito carinhoso e ativo', ongId: 'ong1' },
  { id: 2, name: 'Luna', type: 'cat', breed: 'Siamês', age: '1 ano', location: 'Abrigo Miau - RJ', image: 'https://images.unsplash.com/photo-1514888286974-6c03e2ca1dba?w=400&h=400&fit=crop', description: 'Calma e independente', ongId: 'ong2' },
  { id: 3, name: 'Bob', type: 'dog', breed: 'Vira-lata', age: '3 anos', location: 'ONG Adote Amor - MG', image: 'https://images.unsplash.com/photo-1587300003388-59208cc962cb?w=400&h=400&fit=crop', description: 'Leal e protetor', ongId: 'ong3' },
  { id: 4, name: 'Mel', type: 'cat', breed: 'Persa', age: '4 anos', location: 'Refúgio Pet - SP', image: 'https://images.unsplash.com/photo-1573865526739-10c1dd7e2951?w=400&h=400&fit=crop', description: 'Muito fofa e calma', ongId: 'ong1' },
];

export default function PetAdoptApp() {
  const [pets, setPets] = useState([]);
  const [filteredPets, setFilteredPets] = useState([]);
  const [searchTerm, setSearchTerm] = useState('');
  const [filterType, setFilterType] = useState('all');
  const [cart, setCart] = useState([]);
  const [favorites, setFavorites] = useState([]);
  const [showCart, setShowCart] = useState(false);
  const [showCheckout, setShowCheckout] = useState(false);
  const [checkoutStep, setCheckoutStep] = useState(1);
  const [showMenu, setShowMenu] = useState(false);
  const [currentView, setCurrentView] = useState('login');
  const [user, setUser] = useState(null);
  const [userType, setUserType] = useState(null);
  const [adoptionHistory, setAdoptionHistory] = useState([]);
  const [showLoginModal, setShowLoginModal] = useState(false);
  const [loginType, setLoginType] = useState('adopter');
  const [showAddPetModal, setShowAddPetModal] = useState(false);
  const [editingPet, setEditingPet] = useState(null);
  
  const [loginForm, setLoginForm] = useState({ email: '', password: '', name: '', ongName: '' });
  const [isRegistering, setIsRegistering] = useState(false);
  
  const [formData, setFormData] = useState({
    name: '', email: '', phone: '', address: '', city: '', 
    hasExperience: 'no', hasSpace: 'no', hasOtherPets: 'no'
  });

  const [newPet, setNewPet] = useState({
    name: '', type: 'dog', breed: '', age: '', description: '', image: ''
  });

  useEffect(() => {
    const savedPets = localStorage.getItem('petAdoptPets');
    const savedCart = localStorage.getItem('petAdoptCart');
    const savedFavorites = localStorage.getItem('petAdoptFavorites');
    const savedUser = localStorage.getItem('petAdoptUser');
    const savedUserType = localStorage.getItem('petAdoptUserType');
    const savedHistory = localStorage.getItem('petAdoptHistory');
    
    if (savedPets) {
      setPets(JSON.parse(savedPets));
    } else {
      setPets(initialPets);
      localStorage.setItem('petAdoptPets', JSON.stringify(initialPets));
    }
    
    if (savedCart) setCart(JSON.parse(savedCart));
    if (savedFavorites) setFavorites(JSON.parse(savedFavorites));
    if (savedHistory) setAdoptionHistory(JSON.parse(savedHistory));
    
    if (savedUser && savedUserType) {
      setUser(JSON.parse(savedUser));
      setUserType(savedUserType);
      setCurrentView('home');
    }
  }, []);

  useEffect(() => {
    if (pets.length > 0) {
      localStorage.setItem('petAdoptPets', JSON.stringify(pets));
    }
  }, [pets]);

  useEffect(() => {
    localStorage.setItem('petAdoptCart', JSON.stringify(cart));
  }, [cart]);

  useEffect(() => {
    localStorage.setItem('petAdoptFavorites', JSON.stringify(favorites));
  }, [favorites]);

  useEffect(() => {
    let result = pets;
    
    if (searchTerm) {
      result = result.filter(pet => 
        pet.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
        pet.breed.toLowerCase().includes(searchTerm.toLowerCase()) ||
        pet.location.toLowerCase().includes(searchTerm.toLowerCase())
      );
    }
    
    if (filterType !== 'all') {
      result = result.filter(pet => pet.type === filterType);
    }
    
    if (userType === 'ong' && user) {
      result = result.filter(pet => pet.ongId === user.id);
    }
    
    setFilteredPets(result);
  }, [searchTerm, filterType, pets, userType, user]);

  const handleLogin = (e) => {
    e.preventDefault();
    
    const newUser = {
      id: isRegistering ? Date.now().toString() : 'user_' + Date.now(),
      email: loginForm.email,
      name: loginType === 'ong' ? loginForm.ongName : loginForm.name,
      type: loginType
    };
    
    setUser(newUser);
    setUserType(loginType);
    localStorage.setItem('petAdoptUser', JSON.stringify(newUser));
    localStorage.setItem('petAdoptUserType', loginType);
    setCurrentView('home');
    setShowLoginModal(false);
    setLoginForm({ email: '', password: '', name: '', ongName: '' });
    setIsRegistering(false);
  };

  const handleLogout = () => {
    setUser(null);
    setUserType(null);
    setCurrentView('login');
    setCart([]);
    localStorage.removeItem('petAdoptUser');
    localStorage.removeItem('petAdoptUserType');
    localStorage.removeItem('petAdoptCart');
  };

  const handleAddPet = (e) => {
    e.preventDefault();
    const petToAdd = {
      ...newPet,
      id: Date.now(),
      location: user.name,
      ongId: user.id,
      image: newPet.image || 'https://images.unsplash.com/photo-1601758228041-f3b2795255f1?w=400&h=400&fit=crop'
    };
    
    setPets([...pets, petToAdd]);
    setShowAddPetModal(false);
    setNewPet({ name: '', type: 'dog', breed: '', age: '', description: '', image: '' });
  };

  const handleEditPet = (pet) => {
    setEditingPet(pet);
    setNewPet({
      name: pet.name,
      type: pet.type,
      breed: pet.breed,
      age: pet.age,
      description: pet.description,
      image: pet.image
    });
    setShowAddPetModal(true);
  };

  const handleUpdatePet = (e) => {
    e.preventDefault();
    const updatedPets = pets.map(p => 
      p.id === editingPet.id ? { ...p, ...newPet } : p
    );
    setPets(updatedPets);
    setShowAddPetModal(false);
    setEditingPet(null);
    setNewPet({ name: '', type: 'dog', breed: '', age: '', description: '', image: '' });
  };

  const handleDeletePet = (petId) => {
    if (window.confirm('Tem certeza que deseja remover este pet?')) {
      setPets(pets.filter(p => p.id !== petId));
    }
  };

  const addToCart = (pet) => {
    if (!cart.find(p => p.id === pet.id)) {
      setCart([...cart, pet]);
    }
  };

  const removeFromCart = (petId) => {
    setCart(cart.filter(p => p.id !== petId));
  };

  const toggleFavorite = (petId) => {
    if (favorites.includes(petId)) {
      setFavorites(favorites.filter(id => id !== petId));
    } else {
      setFavorites([...favorites, petId]);
    }
  };

  const completeAdoption = () => {
    const adoption = {
      id: Date.now(),
      date: new Date().toISOString(),
      pets: cart,
      userData: formData,
      status: 'pending'
    };
    
    const newHistory = [...adoptionHistory, adoption];
    setAdoptionHistory(newHistory);
    localStorage.setItem('petAdoptHistory', JSON.stringify(newHistory));
    
    setCart([]);
    setShowCheckout(false);
    setCheckoutStep(1);
    setFormData({
      name: '', email: '', phone: '', address: '', city: '', 
      hasExperience: 'no', hasSpace: 'no', hasOtherPets: 'no'
    });
    alert('Solicitação de adoção enviada com sucesso!');
  };

  const LoginScreen = () => (
    <div className="min-vh-100 d-flex align-items-center justify-content-center" style={{ background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)' }}>
      <div className="container">
        <div className="row justify-content-center">
          <div className="col-md-10 col-lg-8">
            <div className="text-center text-white mb-5">
              <Heart size={64} className="mb-3" />
              <h1 className="display-4 fw-bold mb-3">PetAdopt</h1>
              <p className="lead">Conectando corações através da adoção responsável</p>
            </div>
            
            <div className="row g-4">
              <div className="col-md-6">
                <div className="card shadow-lg border-0 h-100 hover-card">
                  <div className="card-body text-center p-5">
                    <div className="bg-primary bg-opacity-10 rounded-circle d-inline-flex p-4 mb-4">
                      <Heart size={48} className="text-primary" />
                    </div>
                    <h3 className="card-title mb-3">Quero Adotar</h3>
                    <p className="card-text text-muted mb-4">
                      Encontre seu novo melhor amigo e dê um lar cheio de amor
                    </p>
                    <button 
                      className="btn btn-primary btn-lg w-100"
                      onClick={() => {
                        setLoginType('adopter');
                        setShowLoginModal(true);
                      }}
                    >
                      Entrar como Adotante
                    </button>
                  </div>
                </div>
              </div>
              
              <div className="col-md-6">
                <div className="card shadow-lg border-0 h-100 hover-card">
                  <div className="card-body text-center p-5">
                    <div className="bg-success bg-opacity-10 rounded-circle d-inline-flex p-4 mb-4">
                      <PlusCircle size={48} className="text-success" />
                    </div>
                    <h3 className="card-title mb-3">Sou uma ONG</h3>
                    <p className="card-text text-muted mb-4">
                      Cadastre animais e encontre lares para seus resgatados
                    </p>
                    <button 
                      className="btn btn-success btn-lg w-100"
                      onClick={() => {
                        setLoginType('ong');
                        setShowLoginModal(true);
                      }}
                    >
                      Entrar como ONG
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );

  const LoginModal = () => (
    <div className={`modal ${showLoginModal ? 'show d-block' : ''}`} style={{ backgroundColor: 'rgba(0,0,0,0.5)' }}>
      <div className="modal-dialog modal-dialog-centered">
        <div className="modal-content">
          <div className="modal-header border-0">
            <h5 className="modal-title">
              {isRegistering ? 'Criar Conta' : 'Entrar'} - {loginType === 'ong' ? 'ONG' : 'Adotante'}
            </h5>
            <button className="btn-close" onClick={() => { setShowLoginModal(false); setIsRegistering(false); }}></button>
          </div>
          <div className="modal-body">
            <form onSubmit={handleLogin}>
              {isRegistering && (
                <div className="mb-3">
                  <label className="form-label">
                    {loginType === 'ong' ? 'Nome da ONG' : 'Nome Completo'}
                  </label>
                  <input 
                    type="text" 
                    className="form-control" 
                    value={loginType === 'ong' ? loginForm.ongName : loginForm.name}
                    onChange={(e) => setLoginForm({ ...loginForm, [loginType === 'ong' ? 'ongName' : 'name']: e.target.value })}
                    required 
                  />
                </div>
              )}
              
              <div className="mb-3">
                <label className="form-label">Email</label>
                <input 
                  type="email" 
                  className="form-control" 
                  value={loginForm.email}
                  onChange={(e) => setLoginForm({ ...loginForm, email: e.target.value })}
                  required 
                />
              </div>
              
              <div className="mb-3">
                <label className="form-label">Senha</label>
                <input 
                  type="password" 
                  className="form-control" 
                  value={loginForm.password}
                  onChange={(e) => setLoginForm({ ...loginForm, password: e.target.value })}
                  required 
                />
              </div>
              
              <button type="submit" className={`btn btn-${loginType === 'ong' ? 'success' : 'primary'} w-100 mb-3`}>
                {isRegistering ? 'Criar Conta' : 'Entrar'}
              </button>
              
              <div className="text-center">
                <button 
                  type="button" 
                  className="btn btn-link text-decoration-none"
                  onClick={() => setIsRegistering(!isRegistering)}
                >
                  {isRegistering ? 'Já tem conta? Entrar' : 'Criar nova conta'}
                </button>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>
  );

  const Header = () => (
    <nav className={`navbar navbar-expand-lg navbar-${userType === 'ong' ? 'dark bg-success' : 'light bg-white'} shadow-sm sticky-top`}>
      <div className="container">
        <a className={`navbar-brand fw-bold ${userType === 'ong' ? 'text-white' : 'text-primary'}`} href="#home">
          <Heart className="d-inline mb-1" size={24} /> PetAdopt
          {userType === 'ong' && <span className="badge bg-white text-success ms-2 small">ONG</span>}
        </a>
        <button className="btn btn-link d-lg-none" onClick={() => setShowMenu(!showMenu)}>
          <Menu size={24} className={userType === 'ong' ? 'text-white' : ''} />
        </button>
        <div className={`collapse navbar-collapse ${showMenu ? 'show' : ''}`}>
          <ul className="navbar-nav ms-auto align-items-center">
            <li className="nav-item">
              <button className={`nav-link btn btn-link ${userType === 'ong' ? 'text-white' : ''}`} onClick={() => { setCurrentView('home'); setShowMenu(false); }}>
                Início
              </button>
            </li>
            
            {userType === 'adopter' && (
              <li className="nav-item">
                <button className="nav-link btn btn-link position-relative" onClick={() => setShowCart(true)}>
                  <ShoppingCart size={20} />
                  {cart.length > 0 && (
                    <span className="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger">
                      {cart.length}
                    </span>
                  )}
                </button>
              </li>
            )}
            
            {userType === 'ong' && (
              <li className="nav-item">
                <button 
                  className="btn btn-light btn-sm me-2"
                  onClick={() => setShowAddPetModal(true)}
                >
                  <PlusCircle size={16} className="me-1" /> Adicionar Pet
                </button>
              </li>
            )}
            
            <li className="nav-item">
              <button className={`nav-link btn btn-link ${userType === 'ong' ? 'text-white' : ''}`} onClick={() => { setCurrentView('profile'); setShowMenu(false); }}>
                <User size={20} />
              </button>
            </li>
            
            <li className="nav-item">
              <button className={`btn btn-link nav-link ${userType === 'ong' ? 'text-white' : ''}`} onClick={handleLogout}>
                <LogOut size={20} />
              </button>
            </li>
          </ul>
        </div>
      </div>
    </nav>
  );

  const PetCard = ({ pet }) => (
    <div className="col">
      <div className="card h-100 shadow-sm hover-shadow">
        <div className="position-relative">
          <img src={pet.image} className="card-img-top" alt={pet.name} style={{ height: '250px', objectFit: 'cover' }} />
          
          {userType === 'adopter' && (
            <button 
              className="btn btn-light position-absolute top-0 end-0 m-2 rounded-circle p-2"
              onClick={() => toggleFavorite(pet.id)}
            >
              <Heart size={20} fill={favorites.includes(pet.id) ? 'red' : 'none'} color={favorites.includes(pet.id) ? 'red' : 'currentColor'} />
            </button>
          )}
          
          {userType === 'ong' && pet.ongId === user.id && (
            <div className="position-absolute top-0 end-0 m-2">
              <button 
                className="btn btn-light rounded-circle p-2 me-1"
                onClick={() => handleEditPet(pet)}
              >
                <Edit size={18} />
              </button>
              <button 
                className="btn btn-danger rounded-circle p-2"
                onClick={() => handleDeletePet(pet.id)}
              >
                <Trash2 size={18} />
              </button>
            </div>
          )}
        </div>
        <div className="card-body">
          <h5 className="card-title">{pet.name}</h5>
          <p className="card-text text-muted small mb-2">{pet.breed} • {pet.age}</p>
          <p className="card-text small mb-2">{pet.description}</p>
          <p className="card-text small">
            <MapPin size={14} className="d-inline mb-1" /> {pet.location}
          </p>
        </div>
        {userType === 'adopter' && (
          <div className="card-footer bg-white border-0">
            <button 
              className="btn btn-primary w-100"
              onClick={() => addToCart(pet)}
              disabled={cart.find(p => p.id === pet.id)}
            >
              {cart.find(p => p.id === pet.id) ? 'Já no carrinho' : 'Adicionar ao carrinho'}
            </button>
          </div>
        )}
      </div>
    </div>
  );

  const AddPetModal = () => (
    <div className={`modal ${showAddPetModal ? 'show d-block' : ''}`} style={{ backgroundColor: 'rgba(0,0,0,0.5)' }}>
      <div className="modal-dialog modal-dialog-centered">
        <div className="modal-content">
          <div className="modal-header">
            <h5 className="modal-title">{editingPet ? 'Editar' : 'Adicionar'} Pet</h5>
            <button className="btn-close" onClick={() => { setShowAddPetModal(false); setEditingPet(null); setNewPet({ name: '', type: 'dog', breed: '', age: '', description: '', image: '' }); }}></button>
          </div>
          <div className="modal-body">
            <form onSubmit={editingPet ? handleUpdatePet : handleAddPet}>
              <div className="mb-3">
                <label className="form-label">Nome do Pet</label>
                <input 
                  type="text" 
                  className="form-control" 
                  value={newPet.name}
                  onChange={(e) => setNewPet({ ...newPet, name: e.target.value })}
                  required 
                />
              </div>
              
              <div className="mb-3">
                <label className="form-label">Tipo</label>
                <select 
                  className="form-select" 
                  value={newPet.type}
                  onChange={(e) => setNewPet({ ...newPet, type: e.target.value })}
                >
                  <option value="dog">Cachorro</option>
                  <option value="cat">Gato</option>
                </select>
              </div>
              
              <div className="mb-3">
                <label className="form-label">Raça</label>
                <input 
                  type="text" 
                  className="form-control" 
                  value={newPet.breed}
                  onChange={(e) => setNewPet({ ...newPet, breed: e.target.value })}
                  required 
                />
              </div>
              
              <div className="mb-3">
                <label className="form-label">Idade</label>
                <input 
                  type="text" 
                  className="form-control" 
                  placeholder="Ex: 2 anos, 6 meses"
                  value={newPet.age}
                  onChange={(e) => setNewPet({ ...newPet, age: e.target.value })}
                  required 
                />
              </div>
              
              <div className="mb-3">
                <label className="form-label">Descrição</label>
                <textarea 
                  className="form-control" 
                  rows="3"
                  value={newPet.description}
                  onChange={(e) => setNewPet({ ...newPet, description: e.target.value })}
                  required
                ></textarea>
              </div>
              
              <div className="mb-3">
                <label className="form-label">URL da Imagem</label>
                <input 
                  type="url" 
                  className="form-control" 
                  placeholder="https://exemplo.com/imagem.jpg"
                  value={newPet.image}
                  onChange={(e) => setNewPet({ ...newPet, image: e.target.value })}
                />
                <small className="text-muted">Deixe em branco para usar imagem padrão</small>
              </div>
              
              <button type="submit" className="btn btn-success w-100">
                {editingPet ? 'Atualizar' : 'Cadastrar'} Pet
              </button>
            </form>
          </div>
        </div>
      </div>
    </div>
  );

  const CartOffcanvas = () => (
    <div className={`offcanvas offcanvas-end ${showCart ? 'show' : ''}`} style={{ visibility: showCart ? 'visible' : 'hidden' }}>
      <div className="offcanvas-header">
        <h5 className="offcanvas-title">Carrinho de Adoção</h5>
        <button className="btn-close" onClick={() => setShowCart(false)}></button>
      </div>
      <div className="offcanvas-body">
        {cart.length === 0 ? (
          <div className="text-center py-5">
            <ShoppingCart size={48} className="text-muted mb-3" />
            <p className="text-muted">Seu carrinho está vazio</p>
          </div>
        ) : (
          <>
            {cart.map(pet => (
              <div key={pet.id} className="card mb-3">
                <div className="row g-0">
                  <div className="col-4">
                    <img src={pet.image} className="img-fluid rounded-start h-100" alt={pet.name} style={{ objectFit: 'cover' }} />
                  </div>
                  <div className="col-8">
                    <div className="card-body">
                      <h6 className="card-title">{pet.name}</h6>
                      <p className="card-text small text-muted">{pet.breed}</p>
                      <button className="btn btn-sm btn-outline-danger" onClick={() => removeFromCart(pet.id)}>
                        Remover
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            ))}
            <button className="btn btn-primary w-100 mt-3" onClick={() => { setShowCart(false); setShowCheckout(true); }}>
              Finalizar Adoção
            </button>
          </>
        )}
      </div>
    </div>
  );

  const CheckoutModal = () => (
    <div className={`modal ${showCheckout ? 'show d-block' : ''}`} style={{ backgroundColor: 'rgba(0,0,0,0.5)' }}>
      <div className="modal-dialog modal-dialog-centered modal-lg">
        <div className="modal-content">
          <div className="modal-header">
            <h5 className="modal-title">Processo de Adoção - Etapa {checkoutStep}/3</h5>
            <button className="btn-close" onClick={() => setShowCheckout(false)}></button>
          </div>
          <div className="modal-body">
            <div className="progress mb-4" style={{ height: '8px' }}>
              <div className="progress-bar" style={{ width: `${(checkoutStep / 3) * 100}%` }}></div>
            </div>

            {checkoutStep === 1 && (
              <div>
                <h6 className="mb-3">Informações Pessoais</h6>
                <div className="mb-3">
                  <label className="form-label">Nome Completo</label>
                  <input type="text" className="form-control" value={formData.name} onChange={(e) => setFormData({ ...formData, name: e.target.value })} />
                </div>
                <div className="mb-3">
                  <label className="form-label">Email</label>
                  <input type="email" className="form-control" value={formData.email} onChange={(e) => setFormData({ ...formData, email: e.target.value })} />
                </div>
                <div className="mb-3">
                  <label className="form-label">Telefone</label>
                  <input type="tel" className="form-control" value={formData.phone} onChange={(e) => setFormData({ ...formData, phone: e.target.value })} />
                </div>
              </div>
            )}

            {checkoutStep === 2 && (
              <div>
                <h6 className="mb-3">Endereço</h6>
                <div className="mb-3">
                  <label className="form-label">Endereço Completo</label>
                  <input type="text" className="form-control" value={formData.address} onChange={(e) => setFormData({ ...formData, address: e.target.value })} />
                </div>
                <div className="mb-3">
                  <label className="form-label">Cidade/Estado</label>
                  <input type="text" className="form-control" value={formData.city} onChange={(e) => setFormData({ ...formData, city: e.target.value })} />
                </div>
              </div>
            )}

            {checkoutStep === 3 && (
              <div>
                <h6 className="mb-3">Questionário de Adoção</h6>
                <div className="mb-3">
                  <label className="form-label">Tem experiência com pets?</label>
                  <select className="form-select" value={formData.hasExperience} onChange={(e) => setFormData({ ...formData, hasExperience: e.target.value })}>
                    <option value="no">Não</option>
                    <option value="yes">Sim</option>
                  </select>
                </div>
                <div className="mb-3">
                  <label className="form-label">Tem espaço adequado?</label>
                  <select className="form-select" value={formData.hasSpace} onChange={(e) => setFormData({ ...formData, hasSpace: e.target.value })}>
                    <option value="no">Não</option>
                    <option value="yes">Sim</option>
                  </select>
                </div>
                <div className="mb-3">
                  <label className="form-label">Possui outros pets?</label>
                  <select className="form-select" value={formData.hasOtherPets} onChange={(e) => setFormData({ ...formData, hasOtherPets: e.target.value })}>
                    <option value="no">Não</option>
                    <option value="yes">Sim</option>
                  </select>
                </div>
              </div>
            )}
          </div>
          <div className="modal-footer">
            {checkoutStep > 1 && (
              <button className="btn btn-secondary" onClick={() => setCheckoutStep(checkoutStep - 1)}>
                <ChevronLeft size={16} /> Anterior
              </button>
            )}
            {checkoutStep < 3 ? (
              <button className="btn btn-primary" onClick={() => setCheckoutStep(checkoutStep + 1)}>
                Próximo <ChevronRight size={16} />
              </button>
            ) : (
              <button className="btn btn-success" onClick={completeAdoption}>
                <Check size={16} /> Confirmar Adoção
              </button>
            )}
          </div>
        </div>
      </div>
    </div>
  );

  const ProfileView = () => (
    <div className="container py-5">
      <h2 className="mb-4">Meu Perfil</h2>
      {user && (
        <div className="card mb-4">
          <div className="card-body">
            <h5 className="card-title">{user.name}</h5>
            <p className="card-text text-muted">{user.email}</p>
            <span className={`badge bg-${userType === 'ong' ? 'success' : 'primary'}`}>
              {userType === 'ong' ? 'Conta ONG' : 'Conta Adotante'}
            </span>
          </div>
        </div>
      )}

      {userType === 'adopter' && (
        <>
          <h4 className="mb-3">Histórico de Adoções</h4>
          {adoptionHistory.length === 0 ? (
            <div className="alert alert-secondary">Nenhuma adoção realizada ainda</div>
          ) : (
            adoptionHistory.map(adoption => (
              <div key={adoption.id} className="card mb-3">
                <div className="card-body">
                  <h6 className="card-title">Adoção em {new Date(adoption.date).toLocaleDateString()}</h6>
                  <span className="badge bg-warning mb-3">Pendente</span>
                  <div className="row mt-3">
                    {adoption.pets.map(pet => (
                      <div key={pet.id} className="col-md-4 mb-2">
                        <div className="d-flex align-items-center">
                          <img src={pet.image} alt={pet.name} className="rounded me-2" style={{ width: '50px', height: '50px', objectFit: 'cover' }} />
                          <div>
                            <strong>{pet.name}</strong>
                            <small className="d-block text-muted">{pet.breed}</small>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            ))
          )}
        </>
      )}

      {userType === 'ong' && (
        <>
          <h4 className="mb-3">Meus Pets Cadastrados</h4>
          {filteredPets.length === 0 ? (
            <div className="alert alert-secondary">Nenhum pet cadastrado ainda</div>
          ) : (
            <div className="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
              {filteredPets.map(pet => (
                <PetCard key={pet.id} pet={pet} />
              ))}
            </div>
          )}
        </>
      )}
    </div>
  );

  if (currentView === 'login') {
    return (
      <>
        <LoginScreen />
        {showLoginModal && <LoginModal />}
      </>
    );
  }

  return (
    <div className="min-vh-100 bg-light">
      <Header />
      
      {currentView === 'home' ? (
        <>
          <div className={`${userType === 'ong' ? 'bg-success' : 'bg-primary'} text-white py-5`}>
            <div className="container text-center">
              <h1 className="display-4 fw-bold mb-3">
                {userType === 'ong' ? 'Gerencie seus Pets' : 'Encontre seu novo melhor amigo'}
              </h1>
              <p className="lead">
                {userType === 'ong' 
                  ? 'Cadastre e administre os animais disponíveis para adoção' 
                  : 'Dê um lar cheio de amor para cães e gatos que precisam de você'}
              </p>
            </div>
          </div>

          <div className="container py-4">
            <div className="row g-3 mb-4">
              <div className="col-md-8">
                <div className="input-group">
                  <span className="input-group-text"><Search size={20} /></span>
                  <input 
                    type="text" 
                    className="form-control" 
                    placeholder="Buscar por nome, raça ou localização..."
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                  />
                </div>
              </div>
              <div className="col-md-4">
                <div className="input-group">
                  <span className="input-group-text"><Filter size={20} /></span>
                  <select className="form-select" value={filterType} onChange={(e) => setFilterType(e.target.value)}>
                    <option value="all">Todos</option>
                    <option value="dog">Cachorros</option>
                    <option value="cat">Gatos</option>
                  </select>
                </div>
              </div>
            </div>

            <div className="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
              {filteredPets.map(pet => (
                <PetCard key={pet.id} pet={pet} />
              ))}
            </div>

            {filteredPets.length === 0 && (
              <div className="text-center py-5">
                <p className="text-muted">
                  {userType === 'ong' 
                    ? 'Nenhum pet cadastrado. Clique em "Adicionar Pet" para começar.' 
                    : 'Nenhum pet encontrado com esses filtros'}
                </p>
              </div>
            )}
          </div>
        </>
      ) : (
        <ProfileView />
      )}

      {userType === 'adopter' && (
        <>
          <CartOffcanvas />
          {showCart && <div className="offcanvas-backdrop fade show" onClick={() => setShowCart(false)}></div>}
          {showCheckout && <CheckoutModal />}
        </>
      )}
      
      {userType === 'ong' && showAddPetModal && <AddPetModal />}

      <footer className={`${userType === 'ong' ? 'bg-success' : 'bg-dark'} text-white py-4 mt-5`}>
        <div className="container text-center">
          <p className="mb-0">© 2025 PetAdopt - Adoção Responsável</p>
        </div>
      </footer>

      <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
      
      <style>{`
        .hover-shadow:hover {
          transform: translateY(-5px);
          transition: all 0.3s ease;
          box-shadow: 0 .5rem 1rem rgba(0,0,0,.15)!important;
        }
        .hover-card:hover {
          transform: translateY(-10px);
          transition: all 0.3s ease;
        }
        .btn-link {
          text-decoration: none;
          color: inherit;
        }
        .btn-link:hover {
          color: var(--bs-primary);
        }
      `}</style>
    </div>
  );
}
